generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activity_logs {
  id         Int      @id @default(autoincrement())
  team_id    Int
  user_id    Int?
  action     String
  timestamp  DateTime @default(now()) @db.Timestamp(6)
  ip_address String?  @db.VarChar(45)
  teams      teams    @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "activity_logs_team_id_teams_id_fk")
  users      users?   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "activity_logs_user_id_users_id_fk")
}

model invitations {
  id         Int      @id @default(autoincrement())
  team_id    Int
  email      String   @db.VarChar(255)
  role       String   @db.VarChar(50)
  invited_by Int
  invited_at DateTime @default(now()) @db.Timestamp(6)
  status     String   @default("pending") @db.VarChar(20)
  users      users    @relation(fields: [invited_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invitations_invited_by_users_id_fk")
  teams      teams    @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "invitations_team_id_teams_id_fk")
}

model team_members {
  id        Int      @id @default(autoincrement())
  user_id   Int
  team_id   Int
  role      String   @db.VarChar(50)
  joined_at DateTime @default(now()) @db.Timestamp(6)
  teams     teams    @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_members_team_id_teams_id_fk")
  users     users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "team_members_user_id_users_id_fk")
}

model teams {
  id                     Int             @id @default(autoincrement())
  name                   String          @db.VarChar(100)
  created_at             DateTime        @default(now()) @db.Timestamp(6)
  updated_at             DateTime        @default(now()) @db.Timestamp(6)
  stripe_customer_id     String?         @unique(map: "teams_stripe_customer_id_unique")
  stripe_subscription_id String?         @unique(map: "teams_stripe_subscription_id_unique")
  stripe_product_id      String?
  plan_name              String?         @db.VarChar(50)
  subscription_status    String?         @db.VarChar(20)
  activity_logs          activity_logs[]
  invitations            invitations[]
  team_members           team_members[]
}

model users {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(100)
  email         String          @unique(map: "users_email_unique") @db.VarChar(255)
  password_hash String
  role          String          @default("member") @db.VarChar(20)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?       @db.Timestamp(6)
  activity_logs activity_logs[]
  invitations   invitations[]
  team_members  team_members[]
}
